# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to VPS

    steps:
      # 1. Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Clean old source code and ensure directory exists
      - name: Clean old source code and ensure directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /var/www/petshop-main
            rm -rf /var/www/petshop-main/*
            echo "Cleaned old source code on VPS."

      # 3. Copy source code to VPS
      - name: Copy source code to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: "."
          target: "/var/www/petshop-main"

      # 4. Write in .env file
      - name: Write .env file on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            ENV_DIR="/var/www/petshop-main"
            echo "${{ secrets.ENV }}" > "$ENV_DIR/PetFoodShop.Api/.env"
            echo "Wrote .env files on VPS."

      # 5. Deploy container on VPS
      - name: Deploy container on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/petshop-main

            docker stop petshop-api || true
            docker rm petshop-api || true

            # docker build --no-cache -t petshop-api -f PetFoodShop.Api/Dockerfile .

            docker run -d --name petshop-api -p 8080:8080 --env-file PetFoodShop.Api/.env petshop-api

            # docker compose up -d --build --force-recreate petshop-api
