<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Controllers/CartsController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Controllers/CartsController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class CartsController : ControllerBase&#10;{&#10;    private readonly ICartService _cartService;&#10;&#10;    public CartsController(ICartService cartService)&#10;    {&#10;        _cartService = cartService;&#10;    }&#10;&#10;    [HttpGet(&quot;user/{userId}&quot;)]&#10;    public async Task&lt;ActionResult&lt;CartDto&gt;&gt; GetCartByUserId(int userId)&#10;    {&#10;        var cart = await _cartService.GetCartByUserIdAsync(userId);&#10;        if (cart == null)&#10;            return NotFound(new { message = &quot;Cart not found&quot; });&#10;&#10;        return Ok(cart);&#10;    }&#10;&#10;    [HttpPost(&quot;items&quot;)]&#10;    public async Task&lt;ActionResult&lt;CartDto&gt;&gt; AddToCart([FromBody] AddToCartDto addToCartDto)&#10;    {&#10;        try&#10;        {&#10;            var cart = await _cartService.AddToCartAsync(addToCartDto);&#10;            return Ok(cart);&#10;        }&#10;        catch (InvalidOperationException ex)&#10;        {&#10;            return BadRequest(new { message = ex.Message });&#10;        }&#10;    }&#10;&#10;    [HttpPut(&quot;items/{cartItemId}&quot;)]&#10;    public async Task&lt;ActionResult&lt;CartDto&gt;&gt; UpdateCartItem(int cartItemId, [FromBody] UpdateCartItemDto updateDto)&#10;    {&#10;        var cart = await _cartService.UpdateCartItemAsync(cartItemId, updateDto);&#10;        if (cart == null)&#10;            return NotFound(new { message = &quot;Cart item not found&quot; });&#10;&#10;        return Ok(cart);&#10;    }&#10;&#10;    [HttpDelete(&quot;items/{cartItemId}&quot;)]&#10;    public async Task&lt;ActionResult&gt; RemoveFromCart(int cartItemId)&#10;    {&#10;        var result = await _cartService.RemoveFromCartAsync(cartItemId);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;Cart item not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;&#10;    [HttpDelete(&quot;user/{userId}/clear&quot;)]&#10;    public async Task&lt;ActionResult&gt; ClearCart(int userId)&#10;    {&#10;        var result = await _cartService.ClearCartAsync(userId);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;Cart not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Controllers/OrdersController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Controllers/OrdersController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class OrdersController : ControllerBase&#10;{&#10;    private readonly IOrderService _orderService;&#10;&#10;    public OrdersController(IOrderService orderService)&#10;    {&#10;        _orderService = orderService;&#10;    }&#10;&#10;    [HttpGet]&#10;    public async Task&lt;ActionResult&lt;IEnumerable&lt;OrderDto&gt;&gt;&gt; GetAll([FromQuery] string? status = null)&#10;    {&#10;        var orders = status != null&#10;            ? await _orderService.GetOrdersByStatusAsync(status)&#10;            : await _orderService.GetAllOrdersAsync();&#10;        return Ok(orders);&#10;    }&#10;&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;OrderDto&gt;&gt; GetById(int id)&#10;    {&#10;        var order = await _orderService.GetOrderByIdAsync(id);&#10;        if (order == null)&#10;            return NotFound(new { message = &quot;Order not found&quot; });&#10;&#10;        return Ok(order);&#10;    }&#10;&#10;    [HttpGet(&quot;user/{userId}&quot;)]&#10;    public async Task&lt;ActionResult&lt;IEnumerable&lt;OrderDto&gt;&gt;&gt; GetByUser(int userId)&#10;    {&#10;        var orders = await _orderService.GetOrdersByUserAsync(userId);&#10;        return Ok(orders);&#10;    }&#10;&#10;    [HttpPost]&#10;    public async Task&lt;ActionResult&lt;OrderDto&gt;&gt; Create([FromBody] CreateOrderDto createDto)&#10;    {&#10;        try&#10;        {&#10;            var order = await _orderService.CreateOrderAsync(createDto);&#10;            return CreatedAtAction(nameof(GetById), new { id = order.Id }, order);&#10;        }&#10;        catch (InvalidOperationException ex)&#10;        {&#10;            return BadRequest(new { message = ex.Message });&#10;        }&#10;    }&#10;&#10;    [HttpPatch(&quot;{id}/status&quot;)]&#10;    public async Task&lt;ActionResult&lt;OrderDto&gt;&gt; UpdateStatus(int id, [FromBody] UpdateOrderDto updateDto)&#10;    {&#10;        var order = await _orderService.UpdateOrderStatusAsync(id, updateDto);&#10;        if (order == null)&#10;            return NotFound(new { message = &quot;Order not found&quot; });&#10;&#10;        return Ok(order);&#10;    }&#10;&#10;    [HttpDelete(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&gt; Delete(int id)&#10;    {&#10;        var result = await _orderService.DeleteOrderAsync(id);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;Order not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Controllers/StoreLocationsController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Controllers/StoreLocationsController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class StoreLocationsController : ControllerBase&#10;{&#10;    private readonly IStoreLocationService _storeLocationService;&#10;&#10;    public StoreLocationsController(IStoreLocationService storeLocationService)&#10;    {&#10;        _storeLocationService = storeLocationService;&#10;    }&#10;&#10;    [HttpGet]&#10;    public async Task&lt;ActionResult&lt;IEnumerable&lt;StoreLocationDto&gt;&gt;&gt; GetAll()&#10;    {&#10;        var locations = await _storeLocationService.GetAllLocationsAsync();&#10;        return Ok(locations);&#10;    }&#10;&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;StoreLocationDto&gt;&gt; GetById(int id)&#10;    {&#10;        var location = await _storeLocationService.GetLocationByIdAsync(id);&#10;        if (location == null)&#10;            return NotFound(new { message = &quot;Store location not found&quot; });&#10;&#10;        return Ok(location);&#10;    }&#10;&#10;    [HttpGet(&quot;nearby&quot;)]&#10;    public async Task&lt;ActionResult&lt;IEnumerable&lt;StoreLocationDto&gt;&gt;&gt; GetNearby(&#10;        [FromQuery] double latitude, &#10;        [FromQuery] double longitude, &#10;        [FromQuery] double radiusKm = 10)&#10;    {&#10;        var locations = await _storeLocationService.GetNearbyLocationsAsync(latitude, longitude, radiusKm);&#10;        return Ok(locations);&#10;    }&#10;&#10;    [HttpPost]&#10;    public async Task&lt;ActionResult&lt;StoreLocationDto&gt;&gt; Create([FromBody] CreateStoreLocationDto createDto)&#10;    {&#10;        var location = await _storeLocationService.CreateLocationAsync(createDto);&#10;        return CreatedAtAction(nameof(GetById), new { id = location.Id }, location);&#10;    }&#10;&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;StoreLocationDto&gt;&gt; Update(int id, [FromBody] UpdateStoreLocationDto updateDto)&#10;    {&#10;        var location = await _storeLocationService.UpdateLocationAsync(id, updateDto);&#10;        if (location == null)&#10;            return NotFound(new { message = &quot;Store location not found&quot; });&#10;&#10;        return Ok(location);&#10;    }&#10;&#10;    [HttpDelete(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&gt; Delete(int id)&#10;    {&#10;        var result = await _storeLocationService.DeleteLocationAsync(id);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;Store location not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Controllers/UsersController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Controllers/UsersController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Controllers;&#10;&#10;[ApiController]&#10;[Route(&quot;api/[controller]&quot;)]&#10;public class UsersController : ControllerBase&#10;{&#10;    private readonly IUserService _userService;&#10;&#10;    public UsersController(IUserService userService)&#10;    {&#10;        _userService = userService;&#10;    }&#10;&#10;    [HttpGet]&#10;    public async Task&lt;ActionResult&lt;IEnumerable&lt;UserDto&gt;&gt;&gt; GetAll([FromQuery] bool? activeOnly = null)&#10;    {&#10;        var users = activeOnly == true &#10;            ? await _userService.GetActiveUsersAsync() &#10;            : await _userService.GetAllUsersAsync();&#10;        return Ok(users);&#10;    }&#10;&#10;    [HttpGet(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;UserDto&gt;&gt; GetById(int id)&#10;    {&#10;        var user = await _userService.GetUserByIdAsync(id);&#10;        if (user == null)&#10;            return NotFound(new { message = &quot;User not found&quot; });&#10;&#10;        return Ok(user);&#10;    }&#10;&#10;    [HttpGet(&quot;email/{email}&quot;)]&#10;    public async Task&lt;ActionResult&lt;UserDto&gt;&gt; GetByEmail(string email)&#10;    {&#10;        var user = await _userService.GetUserByEmailAsync(email);&#10;        if (user == null)&#10;            return NotFound(new { message = &quot;User not found&quot; });&#10;&#10;        return Ok(user);&#10;    }&#10;&#10;    [HttpPost]&#10;    public async Task&lt;ActionResult&lt;UserDto&gt;&gt; Create([FromBody] CreateUserDto createDto)&#10;    {&#10;        try&#10;        {&#10;            var user = await _userService.CreateUserAsync(createDto);&#10;            return CreatedAtAction(nameof(GetById), new { id = user.Id }, user);&#10;        }&#10;        catch (InvalidOperationException ex)&#10;        {&#10;            return BadRequest(new { message = ex.Message });&#10;        }&#10;    }&#10;&#10;    [HttpPut(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&lt;UserDto&gt;&gt; Update(int id, [FromBody] UpdateUserDto updateDto)&#10;    {&#10;        var user = await _userService.UpdateUserAsync(id, updateDto);&#10;        if (user == null)&#10;            return NotFound(new { message = &quot;User not found&quot; });&#10;&#10;        return Ok(user);&#10;    }&#10;&#10;    [HttpDelete(&quot;{id}&quot;)]&#10;    public async Task&lt;ActionResult&gt; Delete(int id)&#10;    {&#10;        var result = await _userService.DeleteUserAsync(id);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;User not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;&#10;    [HttpPatch(&quot;{id}/soft-delete&quot;)]&#10;    public async Task&lt;ActionResult&gt; SoftDelete(int id)&#10;    {&#10;        var result = await _userService.SoftDeleteUserAsync(id);&#10;        if (!result)&#10;            return NotFound(new { message = &quot;User not found&quot; });&#10;&#10;        return NoContent();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Dtos/CartDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Dtos/CartDto.cs" />
              <option name="updatedContent" value="namespace PetFoodShop.Api.Dtos;&#10;&#10;public class CartDto&#10;{&#10;    public int Id { get; set; }&#10;    public int? Userid { get; set; }&#10;    public DateTime? Createdat { get; set; }&#10;    public DateTime? Updatedat { get; set; }&#10;    public List&lt;CartItemDto&gt;? CartItems { get; set; }&#10;    public decimal TotalAmount { get; set; }&#10;}&#10;&#10;public class CartItemDto&#10;{&#10;    public int Id { get; set; }&#10;    public int? Productid { get; set; }&#10;    public string? ProductName { get; set; }&#10;    public string? ProductSku { get; set; }&#10;    public string? ProductImage { get; set; }&#10;    public int Quantity { get; set; }&#10;    public decimal Pricesnapshot { get; set; }&#10;    public DateTime? Addedat { get; set; }&#10;}&#10;&#10;public class AddToCartDto&#10;{&#10;    public int Userid { get; set; }&#10;    public int Productid { get; set; }&#10;    public int Quantity { get; set; } = 1;&#10;}&#10;&#10;public class UpdateCartItemDto&#10;{&#10;    public int Quantity { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Dtos/OrderDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Dtos/OrderDto.cs" />
              <option name="updatedContent" value="namespace PetFoodShop.Api.Dtos;&#10;&#10;public class OrderDto&#10;{&#10;    public int Id { get; set; }&#10;    public int? Userid { get; set; }&#10;    public string? UserName { get; set; }&#10;    public decimal Totalamount { get; set; }&#10;    public string? Status { get; set; }&#10;    public string? Shippingaddress { get; set; }&#10;    public DateTime? Placedat { get; set; }&#10;    public DateTime? Createdat { get; set; }&#10;    public DateTime? Updatedat { get; set; }&#10;    public List&lt;OrderItemDto&gt;? OrderItems { get; set; }&#10;}&#10;&#10;public class OrderItemDto&#10;{&#10;    public int Id { get; set; }&#10;    public int? Productid { get; set; }&#10;    public string? Productname { get; set; }&#10;    public string? Productsku { get; set; }&#10;    public int Quantity { get; set; }&#10;    public decimal Price { get; set; }&#10;}&#10;&#10;public class CreateOrderDto&#10;{&#10;    public int Userid { get; set; }&#10;    public string? Shippingaddress { get; set; }&#10;    public List&lt;CreateOrderItemDto&gt; Items { get; set; } = new();&#10;}&#10;&#10;public class CreateOrderItemDto&#10;{&#10;    public int Productid { get; set; }&#10;    public int Quantity { get; set; }&#10;}&#10;&#10;public class UpdateOrderDto&#10;{&#10;    public string? Status { get; set; }&#10;    public string? Shippingaddress { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Dtos/PaymentDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Dtos/PaymentDto.cs" />
              <option name="updatedContent" value="namespace PetFoodShop.Api.Dtos;&#10;&#10;public class PaymentDto&#10;{&#10;    public int Id { get; set; }&#10;    public int? Orderid { get; set; }&#10;    public string? Method { get; set; }&#10;    public decimal? Amount { get; set; }&#10;    public string? Status { get; set; }&#10;    public string? Transactionid { get; set; }&#10;    public DateTime? Paidat { get; set; }&#10;    public DateTime? Createdat { get; set; }&#10;}&#10;&#10;public class CreatePaymentDto&#10;{&#10;    public int Orderid { get; set; }&#10;    public string Method { get; set; } = null!;&#10;    public decimal Amount { get; set; }&#10;    public string? Transactionid { get; set; }&#10;}&#10;&#10;public class UpdatePaymentDto&#10;{&#10;    public string? Status { get; set; }&#10;    public string? Transactionid { get; set; }&#10;    public DateTime? Paidat { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Dtos/ProductDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Dtos/ProductDto.cs" />
              <option name="updatedContent" value="namespace PetFoodShop.Api.Dtos;&#10;&#10;public class ProductDto&#10;{&#10;    public int Id { get; set; }&#10;    public string? Sku { get; set; }&#10;    public string Name { get; set; } = null!;&#10;    public string? Description { get; set; }&#10;    public decimal Price { get; set; }&#10;    public int? Stock { get; set; }&#10;    public int? Categoryid { get; set; }&#10;    public string? CategoryName { get; set; }&#10;    public string? Imageurl { get; set; }&#10;    public bool Isdeleted { get; set; }&#10;    public DateTime? Createdat { get; set; }&#10;    public DateTime? Updatedat { get; set; }&#10;}&#10;&#10;public class CreateProductDto&#10;{&#10;    public string? Sku { get; set; }&#10;    public string Name { get; set; } = null!;&#10;    public string? Description { get; set; }&#10;    public decimal Price { get; set; }&#10;    public int? Stock { get; set; }&#10;    public int? Categoryid { get; set; }&#10;    public string? Imageurl { get; set; }&#10;}&#10;&#10;public class UpdateProductDto&#10;{&#10;    public string? Sku { get; set; }&#10;    public string? Name { get; set; }&#10;    public string? Description { get; set; }&#10;    public decimal? Price { get; set; }&#10;    public int? Stock { get; set; }&#10;    public int? Categoryid { get; set; }&#10;    public string? Imageurl { get; set; }&#10;    public bool? Isdeleted { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Dtos/UserDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Dtos/UserDto.cs" />
              <option name="updatedContent" value="namespace PetFoodShop.Api.Dtos;&#10;&#10;public class UserDto&#10;{&#10;    public int Id { get; set; }&#10;    public string Email { get; set; } = null!;&#10;    public string? Fullname { get; set; }&#10;    public string? Phone { get; set; }&#10;    public string? Address { get; set; }&#10;    public string Role { get; set; } = null!;&#10;    public bool Isdeleted { get; set; }&#10;    public DateTime? Createdat { get; set; }&#10;    public DateTime? Updatedat { get; set; }&#10;}&#10;&#10;public class CreateUserDto&#10;{&#10;    public string Email { get; set; } = null!;&#10;    public string Password { get; set; } = null!;&#10;    public string? Fullname { get; set; }&#10;    public string? Phone { get; set; }&#10;    public string? Address { get; set; }&#10;    public string Role { get; set; } = &quot;customer&quot;;&#10;}&#10;&#10;public class UpdateUserDto&#10;{&#10;    public string? Email { get; set; }&#10;    public string? Password { get; set; }&#10;    public string? Fullname { get; set; }&#10;    public string? Phone { get; set; }&#10;    public string? Address { get; set; }&#10;    public string? Role { get; set; }&#10;    public bool? Isdeleted { get; set; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Program.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;builder.Services.AddSwaggerGen();&#10;&#10;//DbContext&#10;builder.Services.AddDbContext&lt;PetFoodShopContext&gt;(options =&gt;&#10;    options.UseNpgsql(builder.Configuration.GetConnectionString(&quot;PetFoodShopDb&quot;)));&#10;&#10;&#10;&#10;var app = builder.Build();&#10;&#10;// Middleware&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.UseSwagger();&#10;    app.UseSwaggerUI();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseAuthorization();&#10;&#10;app.MapControllers();&#10;&#10;app.Run();" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#13;&#10;using PetFoodShop.Api.Data;&#13;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#13;&#10;using PetFoodShop.Api.Repositories.Implements;&#13;&#10;using PetFoodShop.Api.Services.Interfaces;&#13;&#10;using PetFoodShop.Api.Services.Implements;&#13;&#10;&#13;&#10;var builder = WebApplication.CreateBuilder(args);&#13;&#10;&#13;&#10;// Add services&#13;&#10;builder.Services.AddControllers();&#13;&#10;builder.Services.AddEndpointsApiExplorer();&#13;&#10;builder.Services.AddSwaggerGen();&#13;&#10;&#13;&#10;//DbContext&#13;&#10;builder.Services.AddDbContext&lt;PetFoodShopContext&gt;(options =&gt;&#13;&#10;    options.UseNpgsql(builder.Configuration.GetConnectionString(&quot;PetFoodShopDb&quot;)));&#13;&#10;&#13;&#10;// Register Repositories&#13;&#10;builder.Services.AddScoped&lt;IProductRepository, ProductRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;ICategoryRepository, CategoryRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;IUserRepository, UserRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;IOrderRepository, OrderRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;ICartRepository, CartRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;IStoreLocationRepository, StoreLocationRepository&gt;();&#13;&#10;builder.Services.AddScoped&lt;IPaymentRepository, PaymentRepository&gt;();&#13;&#10;&#13;&#10;// Register Services&#13;&#10;builder.Services.AddScoped&lt;IProductService, ProductService&gt;();&#13;&#10;builder.Services.AddScoped&lt;ICategoryService, CategoryService&gt;();&#13;&#10;builder.Services.AddScoped&lt;IUserService, UserService&gt;();&#13;&#10;builder.Services.AddScoped&lt;IOrderService, OrderService&gt;();&#13;&#10;builder.Services.AddScoped&lt;ICartService, CartService&gt;();&#13;&#10;builder.Services.AddScoped&lt;IStoreLocationService, StoreLocationService&gt;();&#13;&#10;builder.Services.AddScoped&lt;IPaymentService, PaymentService&gt;();&#13;&#10;&#13;&#10;var app = builder.Build();&#13;&#10;&#13;&#10;// Middleware&#13;&#10;if (app.Environment.IsDevelopment())&#13;&#10;{&#13;&#10;    app.UseSwagger();&#13;&#10;    app.UseSwaggerUI();&#13;&#10;}&#13;&#10;&#13;&#10;app.UseHttpsRedirection();&#13;&#10;app.UseAuthorization();&#13;&#10;&#13;&#10;app.MapControllers();&#13;&#10;&#13;&#10;app.Run();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/CartRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/CartRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class CartRepository : GenericRepository&lt;Cart&gt;, ICartRepository&#10;{&#10;    public CartRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;Cart?&gt; GetCartByUserIdAsync(int userId)&#10;    {&#10;        return await _dbSet&#10;            .Include(c =&gt; c.Cartitems)&#10;            .ThenInclude(ci =&gt; ci.Product)&#10;            .FirstOrDefaultAsync(c =&gt; c.Userid == userId);&#10;    }&#10;&#10;    public async Task&lt;Cart?&gt; GetCartWithItemsAsync(int cartId)&#10;    {&#10;        return await _dbSet&#10;            .Include(c =&gt; c.Cartitems)&#10;            .ThenInclude(ci =&gt; ci.Product)&#10;            .FirstOrDefaultAsync(c =&gt; c.Id == cartId);&#10;    }&#10;&#10;    public async Task&lt;Cartitem?&gt; GetCartItemAsync(int cartItemId)&#10;    {&#10;        return await _context.Cartitems&#10;            .Include(ci =&gt; ci.Product)&#10;            .FirstOrDefaultAsync(ci =&gt; ci.Id == cartItemId);&#10;    }&#10;&#10;    public async Task&lt;Cartitem&gt; AddCartItemAsync(Cartitem cartItem)&#10;    {&#10;        await _context.Cartitems.AddAsync(cartItem);&#10;        await _context.SaveChangesAsync();&#10;        return cartItem;&#10;    }&#10;&#10;    public async Task UpdateCartItemAsync(Cartitem cartItem)&#10;    {&#10;        _context.Cartitems.Update(cartItem);&#10;        await _context.SaveChangesAsync();&#10;    }&#10;&#10;    public async Task DeleteCartItemAsync(int cartItemId)&#10;    {&#10;        var cartItem = await _context.Cartitems.FindAsync(cartItemId);&#10;        if (cartItem != null)&#10;        {&#10;            _context.Cartitems.Remove(cartItem);&#10;            await _context.SaveChangesAsync();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/CategoryRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/CategoryRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class CategoryRepository : GenericRepository&lt;Category&gt;, ICategoryRepository&#10;{&#10;    public CategoryRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;Category?&gt; GetCategoryWithProductsAsync(int id)&#10;    {&#10;        return await _dbSet&#10;            .Include(c =&gt; c.Products.Where(p =&gt; !p.Isdeleted))&#10;            .FirstOrDefaultAsync(c =&gt; c.Id == id);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/OrderRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/OrderRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class OrderRepository : GenericRepository&lt;Order&gt;, IOrderRepository&#10;{&#10;    public OrderRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Order&gt;&gt; GetOrdersByUserAsync(int userId)&#10;    {&#10;        return await _dbSet&#10;            .Where(o =&gt; o.Userid == userId)&#10;            .Include(o =&gt; o.Orderitems)&#10;            .OrderByDescending(o =&gt; o.Placedat)&#10;            .ToListAsync();&#10;    }&#10;&#10;    public async Task&lt;Order?&gt; GetOrderWithDetailsAsync(int id)&#10;    {&#10;        return await _dbSet&#10;            .Include(o =&gt; o.User)&#10;            .Include(o =&gt; o.Orderitems)&#10;            .ThenInclude(oi =&gt; oi.Product)&#10;            .Include(o =&gt; o.Payment)&#10;            .FirstOrDefaultAsync(o =&gt; o.Id == id);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Order&gt;&gt; GetOrdersByStatusAsync(string status)&#10;    {&#10;        return await _dbSet&#10;            .Where(o =&gt; o.Status == status)&#10;            .Include(o =&gt; o.User)&#10;            .Include(o =&gt; o.Orderitems)&#10;            .OrderByDescending(o =&gt; o.Placedat)&#10;            .ToListAsync();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/PaymentRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/PaymentRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class PaymentRepository : GenericRepository&lt;Payment&gt;, IPaymentRepository&#10;{&#10;    public PaymentRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;Payment?&gt; GetPaymentByOrderIdAsync(int orderId)&#10;    {&#10;        return await _dbSet&#10;            .Include(p =&gt; p.Order)&#10;            .FirstOrDefaultAsync(p =&gt; p.Orderid == orderId);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Payment&gt;&gt; GetPaymentsByStatusAsync(string status)&#10;    {&#10;        return await _dbSet&#10;            .Where(p =&gt; p.Status == status)&#10;            .Include(p =&gt; p.Order)&#10;            .ToListAsync();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/ProductRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/ProductRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class ProductRepository : GenericRepository&lt;Product&gt;, IProductRepository&#10;{&#10;    public ProductRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Product&gt;&gt; GetProductsByCategoryAsync(int categoryId)&#10;    {&#10;        return await _dbSet&#10;            .Where(p =&gt; p.Categoryid == categoryId &amp;&amp; !p.Isdeleted)&#10;            .Include(p =&gt; p.Category)&#10;            .ToListAsync();&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Product&gt;&gt; GetActiveProductsAsync()&#10;    {&#10;        return await _dbSet&#10;            .Where(p =&gt; !p.Isdeleted)&#10;            .Include(p =&gt; p.Category)&#10;            .ToListAsync();&#10;    }&#10;&#10;    public async Task&lt;Product?&gt; GetProductWithCategoryAsync(int id)&#10;    {&#10;        return await _dbSet&#10;            .Include(p =&gt; p.Category)&#10;            .FirstOrDefaultAsync(p =&gt; p.Id == id);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/StoreLocationRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/StoreLocationRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class StoreLocationRepository : GenericRepository&lt;Storelocation&gt;, IStoreLocationRepository&#10;{&#10;    public StoreLocationRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Storelocation&gt;&gt; GetNearbyLocationsAsync(double latitude, double longitude, double radiusKm)&#10;    {&#10;        // Simple distance calculation using Haversine formula approximation&#10;        var locations = await _dbSet.ToListAsync();&#10;        &#10;        return locations.Where(loc =&gt; &#10;        {&#10;            if (!loc.Latitude.HasValue || !loc.Longitude.HasValue)&#10;                return false;&#10;                &#10;            var distance = CalculateDistance(latitude, longitude, loc.Latitude.Value, loc.Longitude.Value);&#10;            return distance &lt;= radiusKm;&#10;        }).ToList();&#10;    }&#10;&#10;    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)&#10;    {&#10;        const double R = 6371; // Earth's radius in km&#10;        var dLat = ToRadians(lat2 - lat1);&#10;        var dLon = ToRadians(lon2 - lon1);&#10;        &#10;        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +&#10;                Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *&#10;                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);&#10;        &#10;        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));&#10;        return R * c;&#10;    }&#10;&#10;    private double ToRadians(double degrees)&#10;    {&#10;        return degrees * Math.PI / 180;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/UserRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Implements/UserRepository.cs" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using PetFoodShop.Api.Data;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Repositories.Implements;&#10;&#10;public class UserRepository : GenericRepository&lt;User&gt;, IUserRepository&#10;{&#10;    public UserRepository(PetFoodShopContext context) : base(context)&#10;    {&#10;    }&#10;&#10;    public async Task&lt;User?&gt; GetByEmailAsync(string email)&#10;    {&#10;        return await _dbSet&#10;            .FirstOrDefaultAsync(u =&gt; u.Email == email);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;User&gt;&gt; GetActiveUsersAsync()&#10;    {&#10;        return await _dbSet&#10;            .Where(u =&gt; !u.Isdeleted)&#10;            .ToListAsync();&#10;    }&#10;&#10;    public async Task&lt;bool&gt; EmailExistsAsync(string email)&#10;    {&#10;        return await _dbSet.AnyAsync(u =&gt; u.Email == email);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/ICartRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/ICartRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface ICartRepository : IGenericRepository&lt;Cart&gt;&#10;{&#10;    Task&lt;Cart?&gt; GetCartByUserIdAsync(int userId);&#10;    Task&lt;Cart?&gt; GetCartWithItemsAsync(int cartId);&#10;    Task&lt;Cartitem?&gt; GetCartItemAsync(int cartItemId);&#10;    Task&lt;Cartitem&gt; AddCartItemAsync(Cartitem cartItem);&#10;    Task UpdateCartItemAsync(Cartitem cartItem);&#10;    Task DeleteCartItemAsync(int cartItemId);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/ICategoryRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/ICategoryRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface ICategoryRepository : IGenericRepository&lt;Category&gt;&#10;{&#10;    Task&lt;Category?&gt; GetCategoryWithProductsAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IOrderRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IOrderRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface IOrderRepository : IGenericRepository&lt;Order&gt;&#10;{&#10;    Task&lt;IEnumerable&lt;Order&gt;&gt; GetOrdersByUserAsync(int userId);&#10;    Task&lt;Order?&gt; GetOrderWithDetailsAsync(int id);&#10;    Task&lt;IEnumerable&lt;Order&gt;&gt; GetOrdersByStatusAsync(string status);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IPaymentRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IPaymentRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface IPaymentRepository : IGenericRepository&lt;Payment&gt;&#10;{&#10;    Task&lt;Payment?&gt; GetPaymentByOrderIdAsync(int orderId);&#10;    Task&lt;IEnumerable&lt;Payment&gt;&gt; GetPaymentsByStatusAsync(string status);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IProductRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IProductRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface IProductRepository : IGenericRepository&lt;Product&gt;&#10;{&#10;    Task&lt;IEnumerable&lt;Product&gt;&gt; GetProductsByCategoryAsync(int categoryId);&#10;    Task&lt;IEnumerable&lt;Product&gt;&gt; GetActiveProductsAsync();&#10;    Task&lt;Product?&gt; GetProductWithCategoryAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IStoreLocationRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IStoreLocationRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface IStoreLocationRepository : IGenericRepository&lt;Storelocation&gt;&#10;{&#10;    Task&lt;IEnumerable&lt;Storelocation&gt;&gt; GetNearbyLocationsAsync(double latitude, double longitude, double radiusKm);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IUserRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Repositories/Interfaces/IUserRepository.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Models;&#10;&#10;namespace PetFoodShop.Api.Repositories.Interfaces;&#10;&#10;public interface IUserRepository : IGenericRepository&lt;User&gt;&#10;{&#10;    Task&lt;User?&gt; GetByEmailAsync(string email);&#10;    Task&lt;IEnumerable&lt;User&gt;&gt; GetActiveUsersAsync();&#10;    Task&lt;bool&gt; EmailExistsAsync(string email);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Implements/OrderService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Implements/OrderService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Services.Implements;&#10;&#10;public class OrderService : IOrderService&#10;{&#10;    private readonly IOrderRepository _orderRepository;&#10;    private readonly IProductRepository _productRepository;&#10;&#10;    public OrderService(IOrderRepository orderRepository, IProductRepository productRepository)&#10;    {&#10;        _orderRepository = orderRepository;&#10;        _productRepository = productRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetAllOrdersAsync()&#10;    {&#10;        var orders = await _orderRepository.GetAllAsync();&#10;        return orders.Select(MapToDto);&#10;    }&#10;&#10;    public async Task&lt;OrderDto?&gt; GetOrderByIdAsync(int id)&#10;    {&#10;        var order = await _orderRepository.GetOrderWithDetailsAsync(id);&#10;        return order == null ? null : MapToDto(order);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetOrdersByUserAsync(int userId)&#10;    {&#10;        var orders = await _orderRepository.GetOrdersByUserAsync(userId);&#10;        return orders.Select(MapToDto);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetOrdersByStatusAsync(string status)&#10;    {&#10;        var orders = await _orderRepository.GetOrdersByStatusAsync(status);&#10;        return orders.Select(MapToDto);&#10;    }&#10;&#10;    public async Task&lt;OrderDto&gt; CreateOrderAsync(CreateOrderDto createDto)&#10;    {&#10;        decimal totalAmount = 0;&#10;        var orderItems = new List&lt;Orderitem&gt;();&#10;&#10;        foreach (var item in createDto.Items)&#10;        {&#10;            var product = await _productRepository.GetByIdAsync(item.Productid);&#10;            if (product == null)&#10;                throw new InvalidOperationException($&quot;Product with ID {item.Productid} not found&quot;);&#10;&#10;            if (product.Stock &lt; item.Quantity)&#10;                throw new InvalidOperationException($&quot;Insufficient stock for product {product.Name}&quot;);&#10;&#10;            var orderItem = new Orderitem&#10;            {&#10;                Productid = item.Productid,&#10;                Productname = product.Name,&#10;                Productsku = product.Sku,&#10;                Quantity = item.Quantity,&#10;                Price = product.Price&#10;            };&#10;&#10;            totalAmount += product.Price * item.Quantity;&#10;            orderItems.Add(orderItem);&#10;&#10;            // Update stock&#10;            product.Stock -= item.Quantity;&#10;            await _productRepository.UpdateAsync(product);&#10;        }&#10;&#10;        var order = new Order&#10;        {&#10;            Userid = createDto.Userid,&#10;            Totalamount = totalAmount,&#10;            Status = &quot;pending&quot;,&#10;            Shippingaddress = createDto.Shippingaddress,&#10;            Placedat = DateTime.Now,&#10;            Createdat = DateTime.Now,&#10;            Updatedat = DateTime.Now,&#10;            Orderitems = orderItems&#10;        };&#10;&#10;        var createdOrder = await _orderRepository.AddAsync(order);&#10;        return MapToDto(createdOrder);&#10;    }&#10;&#10;    public async Task&lt;OrderDto?&gt; UpdateOrderStatusAsync(int id, UpdateOrderDto updateDto)&#10;    {&#10;        var order = await _orderRepository.GetByIdAsync(id);&#10;        if (order == null) return null;&#10;&#10;        if (updateDto.Status != null) order.Status = updateDto.Status;&#10;        if (updateDto.Shippingaddress != null) order.Shippingaddress = updateDto.Shippingaddress;&#10;        order.Updatedat = DateTime.Now;&#10;&#10;        await _orderRepository.UpdateAsync(order);&#10;        return MapToDto(order);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteOrderAsync(int id)&#10;    {&#10;        var exists = await _orderRepository.ExistsAsync(id);&#10;        if (!exists) return false;&#10;&#10;        await _orderRepository.DeleteAsync(id);&#10;        return true;&#10;    }&#10;&#10;    private OrderDto MapToDto(Order order)&#10;    {&#10;        return new OrderDto&#10;        {&#10;            Id = order.Id,&#10;            Userid = order.Userid,&#10;            UserName = order.User?.Fullname,&#10;            Totalamount = order.Totalamount,&#10;            Status = order.Status,&#10;            Shippingaddress = order.Shippingaddress,&#10;            Placedat = order.Placedat,&#10;            Createdat = order.Createdat,&#10;            Updatedat = order.Updatedat,&#10;            OrderItems = order.Orderitems?.Select(oi =&gt; new OrderItemDto&#10;            {&#10;                Id = oi.Id,&#10;                Productid = oi.Productid,&#10;                Productname = oi.Productname,&#10;                Productsku = oi.Productsku,&#10;                Quantity = oi.Quantity,&#10;                Price = oi.Price&#10;            }).ToList()&#10;        };&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Implements/UserService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Implements/UserService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;using PetFoodShop.Api.Models;&#10;using PetFoodShop.Api.Repositories.Interfaces;&#10;using PetFoodShop.Api.Services.Interfaces;&#10;&#10;namespace PetFoodShop.Api.Services.Implements;&#10;&#10;public class UserService : IUserService&#10;{&#10;    private readonly IUserRepository _userRepository;&#10;&#10;    public UserService(IUserRepository userRepository)&#10;    {&#10;        _userRepository = userRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserDto&gt;&gt; GetAllUsersAsync()&#10;    {&#10;        var users = await _userRepository.GetAllAsync();&#10;        return users.Select(MapToDto);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserDto&gt;&gt; GetActiveUsersAsync()&#10;    {&#10;        var users = await _userRepository.GetActiveUsersAsync();&#10;        return users.Select(MapToDto);&#10;    }&#10;&#10;    public async Task&lt;UserDto?&gt; GetUserByIdAsync(int id)&#10;    {&#10;        var user = await _userRepository.GetByIdAsync(id);&#10;        return user == null ? null : MapToDto(user);&#10;    }&#10;&#10;    public async Task&lt;UserDto?&gt; GetUserByEmailAsync(string email)&#10;    {&#10;        var user = await _userRepository.GetByEmailAsync(email);&#10;        return user == null ? null : MapToDto(user);&#10;    }&#10;&#10;    public async Task&lt;UserDto&gt; CreateUserAsync(CreateUserDto createDto)&#10;    {&#10;        // Check if email already exists&#10;        if (await _userRepository.EmailExistsAsync(createDto.Email))&#10;        {&#10;            throw new InvalidOperationException(&quot;Email already exists&quot;);&#10;        }&#10;&#10;        // Hash password (simple implementation - consider using BCrypt in production)&#10;        var hashedPassword = BCrypt.Net.BCrypt.HashPassword(createDto.Password);&#10;&#10;        var user = new User&#10;        {&#10;            Email = createDto.Email,&#10;            Password = hashedPassword,&#10;            Fullname = createDto.Fullname,&#10;            Phone = createDto.Phone,&#10;            Address = createDto.Address,&#10;            Role = createDto.Role,&#10;            Isdeleted = false,&#10;            Createdat = DateTime.UtcNow,&#10;            Updatedat = DateTime.UtcNow&#10;        };&#10;&#10;        var createdUser = await _userRepository.AddAsync(user);&#10;        return MapToDto(createdUser);&#10;    }&#10;&#10;    public async Task&lt;UserDto?&gt; UpdateUserAsync(int id, UpdateUserDto updateDto)&#10;    {&#10;        var user = await _userRepository.GetByIdAsync(id);&#10;        if (user == null) return null;&#10;&#10;        if (updateDto.Email != null) user.Email = updateDto.Email;&#10;        if (updateDto.Password != null) user.Password = BCrypt.Net.BCrypt.HashPassword(updateDto.Password);&#10;        if (updateDto.Fullname != null) user.Fullname = updateDto.Fullname;&#10;        if (updateDto.Phone != null) user.Phone = updateDto.Phone;&#10;        if (updateDto.Address != null) user.Address = updateDto.Address;&#10;        if (updateDto.Role != null) user.Role = updateDto.Role;&#10;        if (updateDto.Isdeleted.HasValue) user.Isdeleted = updateDto.Isdeleted.Value;&#10;        user.Updatedat = DateTime.UtcNow;&#10;&#10;        await _userRepository.UpdateAsync(user);&#10;        return MapToDto(user);&#10;    }&#10;&#10;    public async Task&lt;bool&gt; DeleteUserAsync(int id)&#10;    {&#10;        var exists = await _userRepository.ExistsAsync(id);&#10;        if (!exists) return false;&#10;&#10;        await _userRepository.DeleteAsync(id);&#10;        return true;&#10;    }&#10;&#10;    public async Task&lt;bool&gt; SoftDeleteUserAsync(int id)&#10;    {&#10;        var user = await _userRepository.GetByIdAsync(id);&#10;        if (user == null) return false;&#10;&#10;        user.Isdeleted = true;&#10;        user.Updatedat = DateTime.UtcNow;&#10;        await _userRepository.UpdateAsync(user);&#10;        return true;&#10;    }&#10;&#10;    private UserDto MapToDto(User user)&#10;    {&#10;        return new UserDto&#10;        {&#10;            Id = user.Id,&#10;            Email = user.Email,&#10;            Fullname = user.Fullname,&#10;            Phone = user.Phone,&#10;            Address = user.Address,&#10;            Role = user.Role,&#10;            Isdeleted = user.Isdeleted,&#10;            Createdat = user.Createdat,&#10;            Updatedat = user.Updatedat&#10;        };&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/ICartService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/ICartService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;&#10;namespace PetFoodShop.Api.Services.Interfaces;&#10;&#10;public interface ICartService&#10;{&#10;    Task&lt;CartDto?&gt; GetCartByUserIdAsync(int userId);&#10;    Task&lt;CartDto&gt; AddToCartAsync(AddToCartDto addToCartDto);&#10;    Task&lt;CartDto?&gt; UpdateCartItemAsync(int cartItemId, UpdateCartItemDto updateDto);&#10;    Task&lt;bool&gt; RemoveFromCartAsync(int cartItemId);&#10;    Task&lt;bool&gt; ClearCartAsync(int userId);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IOrderService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IOrderService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;&#10;namespace PetFoodShop.Api.Services.Interfaces;&#10;&#10;public interface IOrderService&#10;{&#10;    Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetAllOrdersAsync();&#10;    Task&lt;OrderDto?&gt; GetOrderByIdAsync(int id);&#10;    Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetOrdersByUserAsync(int userId);&#10;    Task&lt;IEnumerable&lt;OrderDto&gt;&gt; GetOrdersByStatusAsync(string status);&#10;    Task&lt;OrderDto&gt; CreateOrderAsync(CreateOrderDto createDto);&#10;    Task&lt;OrderDto?&gt; UpdateOrderStatusAsync(int id, UpdateOrderDto updateDto);&#10;    Task&lt;bool&gt; DeleteOrderAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IPaymentService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IPaymentService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;&#10;namespace PetFoodShop.Api.Services.Interfaces;&#10;&#10;public interface IPaymentService&#10;{&#10;    Task&lt;IEnumerable&lt;PaymentDto&gt;&gt; GetAllPaymentsAsync();&#10;    Task&lt;PaymentDto?&gt; GetPaymentByIdAsync(int id);&#10;    Task&lt;PaymentDto?&gt; GetPaymentByOrderIdAsync(int orderId);&#10;    Task&lt;IEnumerable&lt;PaymentDto&gt;&gt; GetPaymentsByStatusAsync(string status);&#10;    Task&lt;PaymentDto&gt; CreatePaymentAsync(CreatePaymentDto createDto);&#10;    Task&lt;PaymentDto?&gt; UpdatePaymentAsync(int id, UpdatePaymentDto updateDto);&#10;    Task&lt;bool&gt; DeletePaymentAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IStoreLocationService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IStoreLocationService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;&#10;namespace PetFoodShop.Api.Services.Interfaces;&#10;&#10;public interface IStoreLocationService&#10;{&#10;    Task&lt;IEnumerable&lt;StoreLocationDto&gt;&gt; GetAllLocationsAsync();&#10;    Task&lt;StoreLocationDto?&gt; GetLocationByIdAsync(int id);&#10;    Task&lt;IEnumerable&lt;StoreLocationDto&gt;&gt; GetNearbyLocationsAsync(double latitude, double longitude, double radiusKm);&#10;    Task&lt;StoreLocationDto&gt; CreateLocationAsync(CreateStoreLocationDto createDto);&#10;    Task&lt;StoreLocationDto?&gt; UpdateLocationAsync(int id, UpdateStoreLocationDto updateDto);&#10;    Task&lt;bool&gt; DeleteLocationAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IUserService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PetFoodShop.Api/Services/Interfaces/IUserService.cs" />
              <option name="updatedContent" value="using PetFoodShop.Api.Dtos;&#10;&#10;namespace PetFoodShop.Api.Services.Interfaces;&#10;&#10;public interface IUserService&#10;{&#10;    Task&lt;IEnumerable&lt;UserDto&gt;&gt; GetAllUsersAsync();&#10;    Task&lt;IEnumerable&lt;UserDto&gt;&gt; GetActiveUsersAsync();&#10;    Task&lt;UserDto?&gt; GetUserByIdAsync(int id);&#10;    Task&lt;UserDto?&gt; GetUserByEmailAsync(string email);&#10;    Task&lt;UserDto&gt; CreateUserAsync(CreateUserDto createDto);&#10;    Task&lt;UserDto?&gt; UpdateUserAsync(int id, UpdateUserDto updateDto);&#10;    Task&lt;bool&gt; DeleteUserAsync(int id);&#10;    Task&lt;bool&gt; SoftDeleteUserAsync(int id);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>